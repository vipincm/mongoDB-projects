package com.bosch.eaa.gridFs;

import java.io.IOException;
import java.io.InputStream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.bosch.eaa.gridFs.dao.MongoRepository;
import com.bosch.eaa.gridFs.model.Image;

@RestController
public class Controller {
	@Autowired
	MongoRepository mongoRepository;

	@PostMapping(value = "/save")
	public String saveImage(@RequestBody Image image) throws IOException {
		// Client would be sending base64 ofimage
		// String base64image =
		// "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";

		return mongoRepository.save(image.getBase64());
	}

	@GetMapping(value = "/get/{id}", produces = "image/png")
	public ResponseEntity<byte[]> getImage(@PathVariable String id) throws IOException {

		final HttpHeaders headers = new HttpHeaders();
		// IOUtils.copy(in, response.getOutputStream());
		InputStream in = mongoRepository.getImage(id);
		byte[] byteArray = null;

		if (in != null) {
			byteArray = StreamUtils.copyToByteArray(in);
			return new ResponseEntity<>(byteArray, headers, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(null, headers, HttpStatus.NOT_FOUND);
		}
	}
}
